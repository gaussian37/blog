---
layout: post
title: 리눅스 기본 명령어 및 사용법
date: 2019-10-20 00:00:00
img: c/linux/basic/linux.png
categories: [c-linux] 
tags: [리눅스, 리눅스 명령어] # add tag
---

<br>

- 출처: 만화로 배우는 리눅스 시스템 관리 1,2

<br>

## **목차**

<br>

- ### SSH: 다른 컴퓨터를 리모트로 조작
- ### sudo: 임시로 관리자 권한을 얻을 때
- ### grep: 다양한 문자열을 한 번에 검색
- ### vim: 터미널에서 편집기 사용
- ### yank: vim에서 복사, 붙여넣기, 되돌리기 사용
- ### 가상 터미널: 갑작스러운 네트워크 끊김에서 복귀
- ### 화면 분할: 다른 화면도 보면서 작업이 필요할 때
- ### 명령어 이력: 최근 실행한 명령어 호출
- ### 명령어 이력 검색: 오래전에 실행한 명령어 호출
- ### scp: 네트워크를 건너서 파일을 복사
- ### top: 시스템 과부하 파악
- ### top 표시 전환: 시스템 메모리 부족 파악
- ### 파이프라인: 로그 파일에서 필요한 줄만 추출
- ### 쉘 스크립트: 작업 절차 자동화
- ### 쉘 변수: 같은 문자열을 스크립트에서 재사용
- ### 환경 변수: 작업 환경과 상태를 정해서 스크립트 실행
- ### cut: 로그 파일에서 필요한 줄만 추출
- ### sort, uniq: 같은 내용의 줄을 카운트
- ### sort와 리다이렉트: csv 파일을 열의 내용에 따라 정렬
- ### 명령줄 인수: 명령줄 지정으로 작업 내용을 바꾸기
- ### 조건 분기: 조건에 따라 처리 흐름 바꾸기
- ### 종료 상태: 명령어 이상 종료에 대응
- ### for: 같은 처리를 반복
- ### 쉘 함수: 공통 처리를 재사용
- ### crontab: 정기적인 작업을 자동으로 처리
- ### 공개키 인증: 키 인증으로 안전하게 로그인 처리

<br>

## **SSH: 다른 컴퓨터를 리모트로 조작**

<br>

- 먼저 SSH란 용어부터 살펴보면 `Secure Shell`의 약자입니다.
- 이 뜻은 다른 PC에 네트워크 경유로 로그인해서 자기 앞에 있는 PC처럼 조작할 수 있다는 뜻입니다.
- 통신 경로는 SSH Tunnel인데 암호화 되어서 안전하고 인터넷 경유라도 IP 주소만 알면 리모트 조작이 가능합니다.
- 사용 방법은 `ssh 사용자명 @IP주소`로 사용하면 됩니다.
    - e.g. `ssh user@192.168.11.5`
- 단순히 `ssh`를 사용하여 원격 접속한 경우에는 커맨드라인 환경에서 작업을 해야 하는데 그래픽 환경에서 하고 싶으면 `X`를 이용해야 합니다.
- `X`는 리눅스에서 화면 표시와 입력을 담당하는 구조입니다. 즉, 다양한 어플리케이션에서 받는 입력과 또 그러한 어플리케이션을 그래픽으로 표현하기 위해서는 `X`를 거쳐야 하고 그역할을 `X`가 하고 있습니다.
- 만약 원격 PC를 내 컴퓨터에서 그래픽 환경으로 구성하고 싶으면 원격 PC의 `X`를 사용하지 말고 내 컴퓨터(클라이언트)의 `X`를 이용하고 그 결과를 내 컴퓨터에 출력하도록 하면 됩니다.
- 이렇게 사용하려고 할 때 쓰는 방법이 명령어에 `-Y`와 `-C`를 붙이는 방법입니다. 예를 들어 ``ssh -Y -C user@192.168.11.5`라고 사용할 수 있습니다.
    - `-Y`는 X 전송 지정을 나타내고 `-C`는 통신 내용을 압축 하겠다는 뜻입니다. 이렇게 하면 응답 속도가 좋아집니다.
- 이렇게 접속한 다음에 `nautilus`라는 명령어를 치면 그래픽 환경이 접근 됩니다.

<br>

## **sudo: 임시로 관리자 권한을 얻을 때**

<br>

- 리눅스의 파일에는 3가지 권한이 있습니다. read/write/execute
- 이 3가지 접근 권한은 파일 소유자에 의해서 수정될 수 있는데 예외적으로 `root`에 의하여 수정될 수 있습니다.
- root는 관리자 권한을 가진 특별한 사용자인데 파일 접근 권한을 자유롭게 변경하거나 다른 사람 파일을 수정할 수 있습니다.
- 우분투에서는 root로 로그인 하는것이 제한되어 있는데 대신에 일반 사용자가 root와 같은 권한을 임시적으로 얻을 수 있도록 할 수 있습니다.
    - 즉, 임시적으로 root와 같은 특권을 사용하려면 그 때마다 암호를 입력하면 됩니다.
- 이렇게 임시적으로 root의 권한을 암호를 통하여 얻고 싶을 때 사용하는 키워드가 `sudo`입니다.
- 만약 그래픽 환경에서 작업을 하고 싶으면 다음과 같이 명령어를 입력해서 새로 뜬 그래픽 창에서는 관리자 권한이 주어집니다.
    - `gksudo --sync nautilus`
- 만약 우분투에서 root로 로그인을 하고 싶으면 다음과 같이 명령어를 입력해서 실행할 수 있습니다. 하지만 root로 로그인 하면 자칫 실수로 변경하면 안되는 것을 변경할 수 있으니 주의하셔야 합니다.
    - `sudo -i` 또는 `sudo su`

<br>

## **쉘 스크립트: 작업 절차 자동화**

<br>

- 쉘 스크립트는 쉘 작업을 자동화 하도록 만든 문서를 말합니다. 단순한 텍스트 파일로 내부는 명령어 실행 절차가 적혀져 있습니다.
- 쉘 스크립트를 사용해서 명령어를 직접 순서대로 실행하는 대신에 쉘이 실행하도록 맡기면 됩니다.
- 비교하자면 파이프라인은 명령어 출력을 다음 명령어로 입력하여 옆으로 연결하는 것이라면 쉘 스크립트는 명령어를 세로로 연결하는 것이라고 보면 됩니다.

<br>

- 쉘 스크립트를 만들기 위해서 문서를 편집해야 하는데, 간편한 `vim`을 써서 쉘 스크립트를 한번 만들어 보겠습니다.
- 다루어 볼 예제는 컴퓨터 셋업 이라고 하겠습니다. 그러면 `vim setup.sh` 명령어를 실행하겠습니다.

<br>

- 쉘 스크립트에 가장 먼저 지정해 주어야 하는 것이 `shebang` 또는 `hash-bang`이라고 하는 것입니다.
    - 이것은 스크립트를 실행할 프로그램을 지정하는 것인데요
    - 대표적으로 bash, zsh, python, ruby 등등이 있습니다.
- 이번에 쉘 스크립트를 간략하게 배우기 위해서 사용할 프로그램은 `bash` 입니다.
    - 그러면 작성할 쉘 스크립트는 `bash`가 실행하겠다는 의미입니다.
- 그러면 첫 줄에 `#! /bin/bash` 라고 입력하겠습니다.
- 그 다음 줄부터는 `bash`가 실행할 리눅스 명령어 들을 다음과 같이 입력해 보겠습니다.

<br>
<center><img src="../assets/img/c/linux/basic/1.PNG" alt="Drawing" style="width: 600px;"/></center>
<br>

- 위 쉘 스크립트를 보면 프로그래밍 지식이 없어도 사용할 수 있는 명령어들 입니다. 그만큼 간단합니다.
- 첫 줄에는 `shebang`이 있고 그 다음줄 부터는 리눅스 명령어 들이 나열되어 있습니다.
- 위와 같이 입력이 끝났으면 `vim`을 종료해 보겠습니다.

<br>

- 그 다음으로 setup.sh 파일을 실행하려면 실행 권한을 주어야 합니다. 따라서 `chmod +x setup.sh`로 실행 권한을 부여합니다.
- 실행을 할때에는 경로에 맞춰서 setup.sh 파일을 실행하고 만약 현재 경로에 있다면 `./setup.sh`로 실행합니다.
- 그러면 스크립트에 있는 명령어 들이 차례대로 실행됩니다.

<br>

```
#! /bin/bash
  
echo "hello"

this line is error
  
echo "hello2"

```
<br>

- 만약 위와 같은 쉘 스크립트(test.sh)를 입력하면 중간에 `this line is error` 라는 줄에 의해 에러가 발생합니다.
- 이 때 출력은 다음과 같습니다.

<br>

```
hello
./test.sh: line 5: this: command not found
hello2 
```

<br>

- 만약 에러가 나도 계속 실행하는 것이 의도적이라면 위와 같이 입력해 놓으면 됩니다.
- 만약 에러가 나면 명령을 멈추게 하려면 이렇게 명령어를 작성하면 됩니다.

<br>

``` 
#! /bin/bash
  
echo "hello"

this line is error
if [ $? != 0 ]; then exit; fi
  
echo "hello2"
```

<br>

- 중간에 `if [ $? != 0 ]; then exit; fi` 라는 명령어를 추가해 놓으면 에러가 난 곳에서 스크립트가 멈춥니다.
    - `if [ $? != 0 ]; then exit; fi`에서 대괄호 사이에는 반드시 스페이스를 입력해 주어야 합니다. 
- 그러면 위 코드에서 hello2를 출력하기 전에 스크립트가 멈추게 됩니다.
- `if [ $? != 0 ]; then exit; fi`의 의미를 살펴보면 `#?`가 뜻하는 것은 마지막으로 실행된 명령어의 상태를 뜻합니다.
- 상태는 다음과 같이 있고 0인 경우에는 정상 적으로 실행되었다는 뜻입니다. 즉 0이 아니면 오류가 발생하였다는 것이지요.
    - Exit code 0        Success
    - Exit code 1        General errors, Miscellaneous errors, such as "divide by zero" and other impermissible operations
    - Exit code 2        Misuse of shell builtins (according to Bash documentation)        Example: empty_function() {}

<br>

- 정리하면 다음과 같습니다.
- bash용 쉘 스크립트를 작성하려면 텍스트 파일 첫 줄에 `#! /bin/bash`라고 적고 두번째 줄 이후는 자동 실행하고 싶은 쉘 명령어를 작성합니다.
- 쉘 스크립트는 `chmod +x` 파일명으로 실행 권한을 설정합니다.
- 명령어가 이상이 생겨서 그 시점에서 스크립트 실행을 중단하고 싶을 때, `if [ $? != 0 ]; then exit; fi`라고 적습니다. 

<br>

## **쉘 변수: 같은 문자열을 스크립트에서 재사용**

<br>

- vim에서 문서를 작성할 때, 같은 명령어에서 오류가 계속 발생한 상황이라면 한번에 모든 것을 고치는 것이 간편합니다.
- `esc`를 이용하여 노멀 모드로 돌아간 다음에 `:%s/원문/수정문`을 이용하면 다양한 편집기에서 모두 변환하기를 사용할 수 있듯이 똑같이 한번에 변환 됩니다.
- 만약 어떤 명령어를 계속 사용해야 하면 변수로 지정을 해버릴 수도 있습니다.
- 예를 들어 `var/log/access.log` 라는 것이 계속 사용되어야 한다면 `log=var/log/access.log`로 변수를 지정해 버릴 수 있습니다.
- 이렇게 변수를 선언하면 vim 또는 GNOME에서 사용 가능해집니다. 사용할 때에는 변수 앞에 `$` 를 붙이면 됩니다. 따라서 `$log`라고 사용하면 그것은 var/log/access.log로 치환됩니다.
- 변수 선언의 장점은 매번 동일한 명령어를 사용하지 않아도 되는 것에 있으며 이렇게 되면 실수를 하지 않을 수 있습니다.
    - 예를 들어 `tar xfv 파일경로`는 파일 압축 풀기이고 `tar cfv 파일경로`는 파일 압축을 하는 것입니다.
    - 이 때, `tar_extract="tar xfv"`라고 하고 `tar_compress="tar cfv"`라고 변수 선언을 하면 헷갈리지 않고 사용할 수 있습니다.
    - 이후에는 `$tar_extract` 또는 `$tar_compress`와 같이 사용하면 됩니다.  
    
<br>

## **환경 변수: 작업 환경과 상태를 정해서 스크립트 실행**

<br>

- 