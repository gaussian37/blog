---
layout: post
title: 네트워크 프로그래밍과 소켓의 이해
date: 2019-10-20 00:00:00
img: c/linux/socket/socket.png
categories: [c-linux] 
tags: [소켓 프로그래밍] # add tag
---

<br>

- 출처: TCP/IP 소켓 프로그래밍

<br>

- 네트워크 프로그래밍의 정의를 먼저 살펴보면 네트워크로 연결된 둘 이상의 `컴퓨터 사이에서의 데이터 송수신` 프로그램의 작성을 의미합니다.
- 소켓이라는 것을 기반으로 프로그래밍을 하기 때문에 소켓 프로그래밍이라고도 부르기도 합니다.
- 따라서 네트워크 프로그래밍을 할 때는 운영체제에서 `소켓`이라는 소프트웨어 모듈을 제공해주고 그것을 이용하여 프로그래밍을 합니다. 
- `소켓`을 이용하면 내부적으로 어떻게 통신하는 지 정확하게 알지 못하더라도 컴퓨터 끼리 네트워크 상에서 데이터를 주고 받을 수 있습니다.
- 이번 글에서 다룰 내용은 `소켓`을 이용하여 어떻게 데이터를 주고 받는지 간략하게 살펴보려고 합니다.

<br>

- 먼저 소켓은 `전화기`에 비유해 볼 수 있습니다. 따라서 소켓을 생성한다는 것은 전화기를 한 대 구입한다는 것으로 이해할 수 있습니다.
- 소켓은 `socket` 함수의 호출을 통해서 생성될 수 있습니다. 단, 일반 전화기와의 차이점은 전화를 거는 용도의 소켓과 전화를 수신하는 용도의 소켓 생성 방법에 차이가 있다는 것입니다.

<br>

```cpp
#include <sys/socket.h>

int socket(int domain, int type, int protocol);
```

<br>

- 위 함수를 통하여 소켓을 생성합니다. 성공 시 `파일 디스크립터`를 반환하고 실패 시 -1을 반환합니다.

<br>

- 소켓을 할당한 것을 전화기를 사는 것에 비유해 보았습니다. 전화기를 샀으면 그 전화기에 사용될 전화번호가 필요하겠죠?
- 전화기에 전화번호가 부여되듯이 **소켓에도 주소정보가 할당**됩니다.
- 소켓의 주소정보는 `IP`와 `PORT`번호로 구성이 됩니다.

<br>

```cpp
#include <sys/socket.h>

int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen);
```

<br>

- `bind`함수를 통하여 주소를 할당합니다. 성공 시 0을 실패 시 -1을 반환합니다.

<br>

- 다음으로 해야할 작업은 `전화기를 연결`하는 것입니다.
- 연결 요청이 가능한 상태의 소켓은 걸려오는 `전화를 받을 수 있는 상태`에 비유할 수 있습니다.
- 이 때, 전화를 거는 용도의 소켓은 연결 요청이 가능한 상태의 소켓이 될 필요가 없습니다. 따라서 이것은 전화를 받는 용도의 소켓에서만 필요한 상태입니다.

<br>

```cpp
#include <sys/socket.h>

int listen(int sockfd, int backlog);

``` 

<br>

- `listen` 함수를 호출하게 되면 소켓에 할당된 IP와 PORT번호로 연결 요청이 가능한 상태가 됩니다.
- 이 때, 성공 시에는 0을 실패시에는 -1을 받게됩니다.
 
<br>

- 그 다음으로 다룰 함수는 `accept` 함수 입니다. 바로 전에 `listen` 함수를 호출하게 되면 이 함수를 호출한 소켓은 연결이 될 준비가 되어 있는 상태이므로
- 어떤 연결 요청이 들어오면 `accept` 함수를 통하여 전화를 받는 행위를 해주어야 합니다. 
- 두 소켓간 연결이 되면 데이터 송수신이 가능하고 이것은 양방향 송수신이 됩니다. 

<br>

```cpp
#include <sys/socket.h>

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
```

<br>

- `accept` 함수 호출 성공 시, 파일 디스크립터를 반환합니다. 
- 두 소켓 간에 연결이 되면 마치 파일 입출력을 하듯이 프로그램을 하면 네트워크 상에서 데이터를 주고받을 수 있습니다.

<br>

- 먼저 `연결 요청을 허용하는 소켓의 생성과정`을 정리하면, 소켓의 생성(socket) >>> IP와 PORT번호 할당(bind) >>> 연결 가능한 상태로 변경(listen) >>> 연결요청에 대한 수락(accept)순서로 이루어집니다.
- 이러한 과정을 거치는 프로그램을 `서버`라고 부르고 있습니다. 
- 일반적으로 `서버`를 보면 연결을 요청하는 클라이언트보다 먼저 실행되어야하고 복잡한 실행 과정을 거치게 됩니다.
- 
