---
layout: post
title: 정규식 표현에 대하여 알아보기
date: 2019-01-17 18:43:00
img: python/etc/re/re.jpg
categories: [python-etc] 
tags: [python, 정규식, regular expression, re] # add tag
---

정규 표현식에 대하여 알아보도록 하겠습니다. 정규 표현식을 이용하면 상당히 유연하게 문자열 매칭을 할 수 있습니다.

## 파이썬에서 정규식 표현 사용

먼저 `import re`를 통하여 정규식을 사용할 수 있게 import 해줍니다.

```python
re.findall(정규식 문법, 대상 문장)
```

<br>

위 코드를 이용하여 대상 문장에서 `정규식 문법`에 해당하는 문자들을 찾을 수 있습니다.

+ 정규식 문법 변수 : regex 
+ 대상 문장 : search_target

```python
import re

regex = 정규식 문법
search_target = "Hello, I am gaussian37. My e-mail is gaussian1137@gmail. My phone number is 010-1234-1234"

result = re.findall(regex, search_target)
print(" ".join(result))
```

## 정규식 표현 규칙

+ `\d`는 숫자를 대표하는 정규표현식입니다. 이때 d는 digit을 뜻합니다.
    ```python
    regex = "\d"
    >> 3 7 1 1 3 7 0 1 0 1 2 3 4 1 2 3 4
   ```
+ `\w`는 글자를 대표하는 정규표현식입니다.
    + a, b, c, 가, 나, 다, 1, 2와 같은 문자와 숫자를 포함합니다.
    + 특수문자는 포함하지 않지만 _(언더스코어)는 포함합니다.
    ```python
    regex = "\w"
    >> H e l l o I a m g a u s s i a n 3 7 M y e m a i l i s ...
    ```
+ `+`는 하나 혹은 그 이상 **연결된** 이라는 뜻입니다.
    +  `\d+`는 숫자 하나 혹은 그 이상 연결된 뜻입니다.
    ```python
    regex = "\d+"
    >> 37 1137 010 1234 1234  
    ```
+ `*`는 0개 이상이라는 뜻입니다.
+ \[1-9\]는 1 ~ 9 사이라는 뜻입니다.
    + `[1-9]\d*` 이라고 하면 첫 숫자는 0이 아닌 1 ~ 9 의 숫자로 시작하고 그 다음에는 1개 이상의 숫자가 나오게 됩니다.
    ```python
     regex = "[1-9]\d*"
    >> 37 1137 10 1234 1234
    ```
    + 여기서 010이 아니라 10으로 처리된 것을 보면 이해할 수 있습니다.
+ `-`는 포함할 수도 있고 안 포함할 수도 있는 문자 앞에 사용할 수 있습니다.
    + 전화번호는 `010-1234-1234`처럼 표현할 수도 있고 `01012341234`로 표현할 수도 있습니다.
    ```python
    regex = "\d+-?\d+-?\d+"
    >> 1137 010-1234-1234
    ```
+ 만약 있거나 없는 조건을 여러개 주고 싶으면 `[ ]?`을 이용하여 리스트를 만들어 주면 됩니다.
+ `[- ]?` 라고 하면 `-` 또는 ` `(공백문자)가 있거나 또는 없거나 입니다.
    + 전화번호를 `01012341234` 또는 `010-1234-1234` 또는 `010 1234 1234`로 주고 싶다면 다음과 같습니다.
    ```python
    regex = "\d+[- ]?\d+[- ]?\d+"
    >> 1137 010-1234-1234  
    ```
    
    


